#define _POSIX_C_SOURCE 200112L
#define _DEFAULT_SOURCE
#include <inttypes.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#define BUF_SIZE 60
#define BLOCK_SIZE 128
// 16 bytes
struct header {
  uint64_t size;       // 8 bytes
  struct header *next; // 8 bytes
};

void handle_error(const char *error) {
  perror(error);
  exit(EXIT_FAILURE);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format, data_size == sizeof(uint64_t));

  if (len < 0) {
    handle_error("snprintf");
  }

  write(STDOUT_FILENO, buf, len);
}

void *init_heap(void) {
  void *tracker = sbrk(256);

  if (tracker == (void *)-1) {
    perror("sbrk failed");
    return NULL;
  }

  return tracker;
}
int main() {

  // initialize heap
  void *begin_heap = init_heap();

  // initializie first block
  struct header *my_stack1 = (struct header *)begin_heap;
  my_stack1->size = 128;
  my_stack1->next = NULL;

  char *data_ptr1 = (char *)(my_stack1 + 1);
  memset(data_ptr1, 0, 112);

  // initialize second block
  struct header *my_stack2 = (struct header *)(my_stack1 + 128);
  my_stack2->size = 128;
  my_stack2->next = my_stack1;

  char *data_ptr2 = (char *)(my_stack2 + 1);
  memset(data_ptr2, 1, 112);

  // printing out the output
  print_out("first block: %p\n", my_stack1, sizeof(my_stack1));
  print_out("second block: %p\n", my_stack2, sizeof(my_stack2));

  print_out("first block size: %llu", &my_stack1->size,
            sizeof(my_stack1->size));
}
